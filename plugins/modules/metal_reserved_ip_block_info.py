#!/usr/bin/python
# -*- coding: utf-8 -*-

# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)

# DOCUMENTATION, EXAMPLES, and METAL_PROJECT_ARGS are generated by
# ansible_specdoc. Do not edit them directly.

DOCUMENTATION = ""
EXAMPLES = ""
RETURN = ""

from ansible.module_utils._text import to_native
from ansible_specdoc.objects import SpecField, FieldType, SpecDocMeta, SpecReturnValue
import traceback

from ansible_specdoc.objects import SpecField, FieldType, SpecDocMeta, SpecReturnValue
from ansible_collections.equinix.cloud.plugins.module_utils.equinix import (
    EquinixModule,
    getSpecDocMeta,
)

specdoc_examples = '''
- name: Gather information about all reserved_ip_blocks
  hosts: localhost
  tasks:
      - equinix.cloud.metal_reserved_ip_block_info
''', '''
- name: Gather information about all reserved_ip_blocks in organization
  hosts: localhost
  tasks:
      - equinix.cloud.metal_reserved_ip_block_info:
            organization_id: 2a5122b9-c323-4d5c-b53c-9ad3f54273e7
'''

module_spec = dict(
    type=SpecField(
        type=FieldType.string,
        description=['The type of IP address to list'],
        required=True,
        choices=['public_ipv4', 'public_ipv6', 'private_ipv4', 'global_ipv4', 'vrf'],
    ),
    project_id=SpecField(
        type=FieldType.string,
        description=['UUID of the project to list IP addresses for'],
        required=True,
    ),
    metro=SpecField(
        type=FieldType.string,
        description=['The metro to list IP addresses for'],
    ),
)

result_sample = []

SPECDOC_META = getSpecDocMeta(
    short_description="Gather information about Equinix Metal projects",
    description=(
        'Gather information about Equinix Metal projects'
    ),
    examples=specdoc_examples,
    options=module_spec,
    return_values={
        "resources": SpecReturnValue(
            description='Found resources',
            type=FieldType.dict,
            sample=result_sample,
        ),
    },
)


def main():
    argument_spec = dict(
        type=dict(type='str', required=True, choices=[
            'public_ipv4', 'public_ipv6', 'private_ipv4', 'global_ipv4', 'vrf',
        ]),
        project_id=dict(type='str', required=True),
        metro=dict(type='str'),
    )
    module = EquinixModule(
        argument_spec=SPECDOC_META.ansible_spec,
        supports_check_mode=True,
    )
    try:
        module.params_syntax_check()
        typ = module.params.get('type')
        metro = module.params.get('metro')
        if (metro is not None) & (typ == 'global_ipv4'):
            module.fail_json(msg="metro is not valid parameter for global_ipv4")
        module.params['types'] = [typ]
        return_value = {'resources': module.get_list(
            "metal_ip_reservation")
        }
    except Exception as e:
        tr = traceback.format_exc()
        module.fail_json(msg=to_native(e), exception=tr)
    module.exit_json(**return_value)


if __name__ == '__main__':
    main()
